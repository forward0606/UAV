this is MyAlgo!
the origin input
num_of_node, B
5, 20
list of node: x, y
0 0
8 8
0 64
64 64
64 0
the scaled input:
num_of_node, B
5, 20
list of node: x, y
0 0
4 4
0 40
40 40
40 0

this is a square!
id: 0
node list size 5
node list:
0 0
4 4
0 40
40 40
40 0
portal:
U:
0 64

L:
0 0

R:
64 64

D:
64 0

corner:
LU: 0 64
LD: 0 0
RU: 64 64
RD: 64 0
child id
LU: 1
LD: 2
RU: 3
RD: 4
parent id: -1
this is a square!
id: 1
node list size 1
node list:
0 40
portal:
U:
0 64

L:
0 32

R:
32 64

D:
32 32

corner:
LU: 0 64
LD: 0 32
RU: 32 64
RD: 32 32
child id
LU: -1
LD: -1
RU: -1
RD: -1
parent id: 0
this is a square!
id: 2
node list size 2
node list:
0 0
4 4
portal:
U:
0 32

L:
0 0

R:
32 32

D:
32 0

corner:
LU: 0 32
LD: 0 0
RU: 32 32
RD: 32 0
child id
LU: 5
LD: 6
RU: 7
RD: 8
parent id: 0
this is a square!
id: 5
node list size 0
node list:
portal:
U:
0 32

L:
0 16

R:
16 32

D:
16 16

corner:
LU: 0 32
LD: 0 16
RU: 16 32
RD: 16 16
child id
LU: -1
LD: -1
RU: -1
RD: -1
parent id: 2
this is a square!
id: 6
node list size 2
node list:
0 0
4 4
portal:
U:
0 16

L:
0 0

R:
16 16

D:
16 0

corner:
LU: 0 16
LD: 0 0
RU: 16 16
RD: 16 0
child id
LU: 9
LD: 10
RU: 11
RD: 12
parent id: 2
this is a square!
id: 9
node list size 0
node list:
portal:
U:
0 16

L:
0 8

R:
8 16

D:
8 8

corner:
LU: 0 16
LD: 0 8
RU: 8 16
RD: 8 8
child id
LU: -1
LD: -1
RU: -1
RD: -1
parent id: 6
this is a square!
id: 10
node list size 2
node list:
0 0
4 4
portal:
U:
0 8

L:
0 0

R:
8 8

D:
8 0

corner:
LU: 0 8
LD: 0 0
RU: 8 8
RD: 8 0
child id
LU: 13
LD: 14
RU: 15
RD: 16
parent id: 6
this is a square!
id: 13
node list size 1
node list:
4 4
portal:
U:
0 8

L:
0 4

R:
4 8

D:
4 4

corner:
LU: 0 8
LD: 0 4
RU: 4 8
RD: 4 4
child id
LU: -1
LD: -1
RU: -1
RD: -1
parent id: 10
this is a square!
id: 14
node list size 1
node list:
0 0
portal:
U:
0 4

L:
0 0

R:
4 4

D:
4 0

corner:
LU: 0 4
LD: 0 0
RU: 4 4
RD: 4 0
child id
LU: -1
LD: -1
RU: -1
RD: -1
parent id: 10
this is a square!
id: 15
node list size 0
node list:
portal:
U:
4 8

L:
4 4

R:
8 8

D:
8 4

corner:
LU: 4 8
LD: 4 4
RU: 8 8
RD: 8 4
child id
LU: -1
LD: -1
RU: -1
RD: -1
parent id: 10
this is a square!
id: 16
node list size 0
node list:
portal:
U:
4 4

L:
4 0

R:
8 4

D:
8 0

corner:
LU: 4 4
LD: 4 0
RU: 8 4
RD: 8 0
child id
LU: -1
LD: -1
RU: -1
RD: -1
parent id: 10
this is a square!
id: 11
node list size 0
node list:
portal:
U:
8 16

L:
8 8

R:
16 16

D:
16 8

corner:
LU: 8 16
LD: 8 8
RU: 16 16
RD: 16 8
child id
LU: -1
LD: -1
RU: -1
RD: -1
parent id: 6
this is a square!
id: 12
node list size 0
node list:
portal:
U:
8 8

L:
8 0

R:
16 8

D:
16 0

corner:
LU: 8 8
LD: 8 0
RU: 16 8
RD: 16 0
child id
LU: -1
LD: -1
RU: -1
RD: -1
parent id: 6
this is a square!
id: 7
node list size 0
node list:
portal:
U:
16 32

L:
16 16

R:
32 32

D:
32 16

corner:
LU: 16 32
LD: 16 16
RU: 32 32
RD: 32 16
child id
LU: -1
LD: -1
RU: -1
RD: -1
parent id: 2
this is a square!
id: 8
node list size 0
node list:
portal:
U:
16 16

L:
16 0

R:
32 16

D:
32 0

corner:
LU: 16 16
LD: 16 0
RU: 32 16
RD: 32 0
child id
LU: -1
LD: -1
RU: -1
RD: -1
parent id: 2
this is a square!
id: 3
node list size 1
node list:
40 40
portal:
U:
32 64

L:
32 32

R:
64 64

D:
64 32

corner:
LU: 32 64
LD: 32 32
RU: 64 64
RD: 64 32
child id
LU: -1
LD: -1
RU: -1
RD: -1
parent id: 0
this is a square!
id: 4
node list size 1
node list:
40 0
portal:
U:
32 32

L:
32 0

R:
64 32

D:
64 0

corner:
LU: 32 32
LD: 32 0
RU: 64 32
RD: 64 0
child id
LU: -1
LD: -1
RU: -1
RD: -1
parent id: 0
Square::get_dp_table()
id 0
Square::get_dp_table()
id 1
node_list == 1
node(x, y) = (0, 40)
find portal pairs
entry(x, y) = (0, 64), exit(x, y) = (0, 32)
distance_sum = 32
minimum distance = 32
entry(x, y) = (0, 64), exit(x, y) = (0, 32)
entry(x, y) = (32, 64), exit(x, y) = (32, 32)
distance_sum = 64
minimum distance = 64
entry(x, y) = (0, 64), exit(x, y) = (32, 64)
distance_sum = 32
minimum distance = 64
entry(x, y) = (0, 64), exit(x, y) = (32, 64)
entry(x, y) = (0, 32), exit(x, y) = (32, 32)
distance_sum = 64
minimum distance = 72.9848
entry(x, y) = (0, 64), exit(x, y) = (32, 32)
distance_sum = 45.2548
minimum distance = 56.9848
entry(x, y) = (0, 32), exit(x, y) = (32, 64)
distance_sum = 45.2548
minimum distance = 48
entry(x, y) = (0, 32), exit(x, y) = (32, 32)
distance_sum = 32
minimum distance = 40.9848
entry(x, y) = (32, 64), exit(x, y) = (32, 32)
distance_sum = 32
minimum distance = 72.9848
Square::get_dp_table()
id 2
Square::get_dp_table()
id 5
node_list == 0
distance_sum = 0
entry(x, y) = (0, 32), exit(x, y) = (0, 16)
distance_sum = 16
entry(x, y) = (0, 32), exit(x, y) = (0, 16)
entry(x, y) = (16, 32), exit(x, y) = (16, 16)
distance_sum = 32
entry(x, y) = (0, 32), exit(x, y) = (16, 32)
distance_sum = 16
entry(x, y) = (0, 32), exit(x, y) = (16, 32)
entry(x, y) = (0, 16), exit(x, y) = (16, 16)
distance_sum = 32
entry(x, y) = (0, 32), exit(x, y) = (16, 16)
distance_sum = 22.6274
entry(x, y) = (0, 16), exit(x, y) = (16, 32)
distance_sum = 22.6274
entry(x, y) = (0, 16), exit(x, y) = (16, 16)
distance_sum = 16
entry(x, y) = (16, 32), exit(x, y) = (16, 16)
distance_sum = 16
Square::get_dp_table()
id 6
Square::get_dp_table()
id 9
node_list == 0
distance_sum = 0
entry(x, y) = (0, 16), exit(x, y) = (0, 8)
distance_sum = 8
entry(x, y) = (0, 16), exit(x, y) = (0, 8)
entry(x, y) = (8, 16), exit(x, y) = (8, 8)
distance_sum = 16
entry(x, y) = (0, 16), exit(x, y) = (8, 16)
distance_sum = 8
entry(x, y) = (0, 16), exit(x, y) = (8, 16)
entry(x, y) = (0, 8), exit(x, y) = (8, 8)
distance_sum = 16
entry(x, y) = (0, 16), exit(x, y) = (8, 8)
distance_sum = 11.3137
entry(x, y) = (0, 8), exit(x, y) = (8, 16)
distance_sum = 11.3137
entry(x, y) = (0, 8), exit(x, y) = (8, 8)
distance_sum = 8
entry(x, y) = (8, 16), exit(x, y) = (8, 8)
distance_sum = 8
Square::get_dp_table()
id 10
Square::get_dp_table()
id 13
node_list == 1
node(x, y) = (4, 4)
entry(x, y) = (0, 8), exit(x, y) = (0, 4)
distance_sum = 4
minimum distance = 9.65685
entry(x, y) = (0, 8), exit(x, y) = (0, 4)
entry(x, y) = (4, 8), exit(x, y) = (4, 4)
distance_sum = 8
minimum distance = 8
entry(x, y) = (0, 8), exit(x, y) = (4, 8)
distance_sum = 4
minimum distance = 9.65685
entry(x, y) = (0, 8), exit(x, y) = (4, 8)
entry(x, y) = (0, 4), exit(x, y) = (4, 4)
distance_sum = 8
minimum distance = 8
entry(x, y) = (0, 8), exit(x, y) = (4, 4)
distance_sum = 5.65685
minimum distance = 5.65685
entry(x, y) = (0, 4), exit(x, y) = (4, 8)
distance_sum = 5.65685
minimum distance = 8
entry(x, y) = (0, 4), exit(x, y) = (4, 4)
distance_sum = 4
minimum distance = 4
entry(x, y) = (4, 8), exit(x, y) = (4, 4)
distance_sum = 4
minimum distance = 4
Square::get_dp_table()
id 14
node_list == 1
node(x, y) = (0, 0)
entry(x, y) = (0, 4), exit(x, y) = (0, 0)
distance_sum = 4
minimum distance = 4
entry(x, y) = (0, 4), exit(x, y) = (0, 0)
entry(x, y) = (4, 4), exit(x, y) = (4, 0)
distance_sum = 8
minimum distance = 8
entry(x, y) = (0, 4), exit(x, y) = (4, 4)
distance_sum = 4
minimum distance = 9.65685
entry(x, y) = (0, 4), exit(x, y) = (4, 4)
entry(x, y) = (0, 0), exit(x, y) = (4, 0)
distance_sum = 8
minimum distance = 8
entry(x, y) = (0, 4), exit(x, y) = (4, 0)
distance_sum = 5.65685
minimum distance = 8
entry(x, y) = (0, 0), exit(x, y) = (4, 4)
distance_sum = 5.65685
minimum distance = 5.65685
entry(x, y) = (0, 0), exit(x, y) = (4, 0)
distance_sum = 4
minimum distance = 4
entry(x, y) = (4, 4), exit(x, y) = (4, 0)
distance_sum = 4
minimum distance = 9.65685
Square::get_dp_table()
id 15
node_list == 0
distance_sum = 0
entry(x, y) = (4, 8), exit(x, y) = (4, 4)
distance_sum = 4
entry(x, y) = (4, 8), exit(x, y) = (4, 4)
entry(x, y) = (8, 8), exit(x, y) = (8, 4)
distance_sum = 8
entry(x, y) = (4, 8), exit(x, y) = (8, 8)
distance_sum = 4
entry(x, y) = (4, 8), exit(x, y) = (8, 8)
entry(x, y) = (4, 4), exit(x, y) = (8, 4)
distance_sum = 8
entry(x, y) = (4, 8), exit(x, y) = (8, 4)
distance_sum = 5.65685
entry(x, y) = (4, 4), exit(x, y) = (8, 8)
distance_sum = 5.65685
entry(x, y) = (4, 4), exit(x, y) = (8, 4)
distance_sum = 4
entry(x, y) = (8, 8), exit(x, y) = (8, 4)
distance_sum = 4
Square::get_dp_table()
id 16
node_list == 0
distance_sum = 0
entry(x, y) = (4, 4), exit(x, y) = (4, 0)
distance_sum = 4
entry(x, y) = (4, 4), exit(x, y) = (4, 0)
entry(x, y) = (8, 4), exit(x, y) = (8, 0)
distance_sum = 8
entry(x, y) = (4, 4), exit(x, y) = (8, 4)
distance_sum = 4
entry(x, y) = (4, 4), exit(x, y) = (8, 4)
entry(x, y) = (4, 0), exit(x, y) = (8, 0)
distance_sum = 8
entry(x, y) = (4, 4), exit(x, y) = (8, 0)
distance_sum = 5.65685
entry(x, y) = (4, 0), exit(x, y) = (8, 4)
distance_sum = 5.65685
entry(x, y) = (4, 0), exit(x, y) = (8, 0)
distance_sum = 4
entry(x, y) = (8, 4), exit(x, y) = (8, 0)
distance_sum = 4
merge
min_distance = 13.6569
entry(x, y) = (0, 8), exit(x, y) = (0, 0)
min_distance = 11.3137
entry(x, y) = (0, 8), exit(x, y) = (0, 0)
entry(x, y) = (8, 8), exit(x, y) = (8, 0)
min_distance = 19.3137
entry(x, y) = (0, 8), exit(x, y) = (8, 8)
min_distance = 21.6569
entry(x, y) = (0, 8), exit(x, y) = (8, 8)
entry(x, y) = (0, 0), exit(x, y) = (8, 0)
min_distance = 19.3137
entry(x, y) = (0, 8), exit(x, y) = (8, 0)
min_distance = 19.3137
entry(x, y) = (0, 0), exit(x, y) = (8, 8)
min_distance = 13.6569
entry(x, y) = (0, 0), exit(x, y) = (8, 0)
min_distance = 13.6569
entry(x, y) = (8, 8), exit(x, y) = (8, 0)
min_distance = 21.6569
Square::get_dp_table()
id 11
node_list == 0
distance_sum = 0
entry(x, y) = (8, 16), exit(x, y) = (8, 8)
distance_sum = 8
entry(x, y) = (8, 16), exit(x, y) = (8, 8)
entry(x, y) = (16, 16), exit(x, y) = (16, 8)
distance_sum = 16
entry(x, y) = (8, 16), exit(x, y) = (16, 16)
distance_sum = 8
entry(x, y) = (8, 16), exit(x, y) = (16, 16)
entry(x, y) = (8, 8), exit(x, y) = (16, 8)
distance_sum = 16
entry(x, y) = (8, 16), exit(x, y) = (16, 8)
distance_sum = 11.3137
entry(x, y) = (8, 8), exit(x, y) = (16, 16)
distance_sum = 11.3137
entry(x, y) = (8, 8), exit(x, y) = (16, 8)
distance_sum = 8
entry(x, y) = (16, 16), exit(x, y) = (16, 8)
distance_sum = 8
Square::get_dp_table()
id 12
node_list == 0
distance_sum = 0
entry(x, y) = (8, 8), exit(x, y) = (8, 0)
distance_sum = 8
entry(x, y) = (8, 8), exit(x, y) = (8, 0)
entry(x, y) = (16, 8), exit(x, y) = (16, 0)
distance_sum = 16
entry(x, y) = (8, 8), exit(x, y) = (16, 8)
distance_sum = 8
entry(x, y) = (8, 8), exit(x, y) = (16, 8)
entry(x, y) = (8, 0), exit(x, y) = (16, 0)
distance_sum = 16
entry(x, y) = (8, 8), exit(x, y) = (16, 0)
distance_sum = 11.3137
entry(x, y) = (8, 0), exit(x, y) = (16, 8)
distance_sum = 11.3137
entry(x, y) = (8, 0), exit(x, y) = (16, 0)
distance_sum = 8
entry(x, y) = (16, 8), exit(x, y) = (16, 0)
distance_sum = 8
merge
min_distance = 13.6569
entry(x, y) = (0, 16), exit(x, y) = (0, 0)
min_distance = 19.3137
entry(x, y) = (0, 16), exit(x, y) = (0, 0)
entry(x, y) = (16, 16), exit(x, y) = (16, 0)
min_distance = 35.3137
entry(x, y) = (0, 16), exit(x, y) = (16, 16)
min_distance = 29.6569
entry(x, y) = (0, 16), exit(x, y) = (16, 16)
entry(x, y) = (0, 0), exit(x, y) = (16, 0)
min_distance = 35.3137
entry(x, y) = (0, 16), exit(x, y) = (16, 0)
min_distance = 35.3137
entry(x, y) = (0, 0), exit(x, y) = (16, 16)
min_distance = 24.9706
entry(x, y) = (0, 0), exit(x, y) = (16, 0)
min_distance = 21.6569
entry(x, y) = (16, 16), exit(x, y) = (16, 0)
min_distance = 29.6569
Square::get_dp_table()
id 7
node_list == 0
distance_sum = 0
entry(x, y) = (16, 32), exit(x, y) = (16, 16)
distance_sum = 16
entry(x, y) = (16, 32), exit(x, y) = (16, 16)
entry(x, y) = (32, 32), exit(x, y) = (32, 16)
distance_sum = 32
entry(x, y) = (16, 32), exit(x, y) = (32, 32)
distance_sum = 16
entry(x, y) = (16, 32), exit(x, y) = (32, 32)
entry(x, y) = (16, 16), exit(x, y) = (32, 16)
distance_sum = 32
entry(x, y) = (16, 32), exit(x, y) = (32, 16)
distance_sum = 22.6274
entry(x, y) = (16, 16), exit(x, y) = (32, 32)
distance_sum = 22.6274
entry(x, y) = (16, 16), exit(x, y) = (32, 16)
distance_sum = 16
entry(x, y) = (32, 32), exit(x, y) = (32, 16)
distance_sum = 16
Square::get_dp_table()
id 8
node_list == 0
distance_sum = 0
entry(x, y) = (16, 16), exit(x, y) = (16, 0)
distance_sum = 16
entry(x, y) = (16, 16), exit(x, y) = (16, 0)
entry(x, y) = (32, 16), exit(x, y) = (32, 0)
distance_sum = 32
entry(x, y) = (16, 16), exit(x, y) = (32, 16)
distance_sum = 16
entry(x, y) = (16, 16), exit(x, y) = (32, 16)
entry(x, y) = (16, 0), exit(x, y) = (32, 0)
distance_sum = 32
entry(x, y) = (16, 16), exit(x, y) = (32, 0)
distance_sum = 22.6274
entry(x, y) = (16, 0), exit(x, y) = (32, 16)
distance_sum = 22.6274
entry(x, y) = (16, 0), exit(x, y) = (32, 0)
distance_sum = 16
entry(x, y) = (32, 16), exit(x, y) = (32, 0)
distance_sum = 16
merge
min_distance = 13.6569
entry(x, y) = (0, 32), exit(x, y) = (0, 0)
min_distance = 35.3137
entry(x, y) = (0, 32), exit(x, y) = (0, 0)
entry(x, y) = (32, 32), exit(x, y) = (32, 0)
min_distance = 67.3137
entry(x, y) = (0, 32), exit(x, y) = (32, 32)
min_distance = 45.6569
entry(x, y) = (0, 32), exit(x, y) = (32, 32)
entry(x, y) = (0, 0), exit(x, y) = (32, 0)
min_distance = 67.3137
entry(x, y) = (0, 32), exit(x, y) = (32, 0)
min_distance = 58.9117
entry(x, y) = (0, 0), exit(x, y) = (32, 32)
min_distance = 47.598
entry(x, y) = (0, 0), exit(x, y) = (32, 0)
min_distance = 37.6569
entry(x, y) = (32, 32), exit(x, y) = (32, 0)
min_distance = 45.6569
Square::get_dp_table()
id 3
node_list == 1
node(x, y) = (40, 40)
entry(x, y) = (32, 64), exit(x, y) = (32, 32)
distance_sum = 32
minimum distance = 36.6119
entry(x, y) = (32, 64), exit(x, y) = (32, 32)
entry(x, y) = (64, 64), exit(x, y) = (64, 32)
distance_sum = 64
minimum distance = 68.6119
entry(x, y) = (32, 64), exit(x, y) = (64, 64)
distance_sum = 32
minimum distance = 59.2393
entry(x, y) = (32, 64), exit(x, y) = (64, 64)
entry(x, y) = (32, 32), exit(x, y) = (64, 32)
distance_sum = 64
minimum distance = 68.6119
entry(x, y) = (32, 64), exit(x, y) = (64, 32)
distance_sum = 45.2548
minimum distance = 50.5964
entry(x, y) = (32, 32), exit(x, y) = (64, 64)
distance_sum = 45.2548
minimum distance = 45.2548
entry(x, y) = (32, 32), exit(x, y) = (64, 32)
distance_sum = 32
minimum distance = 36.6119
entry(x, y) = (64, 64), exit(x, y) = (64, 32)
distance_sum = 32
minimum distance = 59.2393
Square::get_dp_table()
id 4
node_list == 1
node(x, y) = (40, 0)
entry(x, y) = (32, 32), exit(x, y) = (32, 0)
distance_sum = 32
minimum distance = 40.9848
entry(x, y) = (32, 32), exit(x, y) = (32, 0)
entry(x, y) = (64, 32), exit(x, y) = (64, 0)
distance_sum = 64
minimum distance = 72.9848
entry(x, y) = (32, 32), exit(x, y) = (64, 32)
distance_sum = 32
minimum distance = 72.9848
entry(x, y) = (32, 32), exit(x, y) = (64, 32)
entry(x, y) = (32, 0), exit(x, y) = (64, 0)
distance_sum = 64
minimum distance = 64
entry(x, y) = (32, 32), exit(x, y) = (64, 0)
distance_sum = 45.2548
minimum distance = 56.9848
entry(x, y) = (32, 0), exit(x, y) = (64, 32)
distance_sum = 45.2548
minimum distance = 48
entry(x, y) = (32, 0), exit(x, y) = (64, 0)
distance_sum = 32
minimum distance = 32
entry(x, y) = (64, 32), exit(x, y) = (64, 0)
distance_sum = 32
minimum distance = 64
merge
min_distance = 184.508
entry(x, y) = (0, 64), exit(x, y) = (0, 0)
min_distance = 176.91
entry(x, y) = (0, 64), exit(x, y) = (0, 0)
entry(x, y) = (64, 64), exit(x, y) = (64, 0)
min_distance = 169.553
entry(x, y) = (0, 64), exit(x, y) = (64, 64)
min_distance = 177.151
entry(x, y) = (0, 64), exit(x, y) = (64, 64)
entry(x, y) = (0, 0), exit(x, y) = (64, 0)
min_distance = 169.553
entry(x, y) = (0, 64), exit(x, y) = (64, 0)
min_distance = 171.254
entry(x, y) = (0, 0), exit(x, y) = (64, 64)
min_distance = 194.538
entry(x, y) = (0, 0), exit(x, y) = (64, 0)
min_distance = 176.91
entry(x, y) = (64, 64), exit(x, y) = (64, 0)
min_distance = 177.151
